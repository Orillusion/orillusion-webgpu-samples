import"./modulepreload-polyfill-3cfb730f.js";import{c as U,m as G}from"./mat4-5036aab8.js";const S=`@group(0) @binding(0) var<storage, read> modelView: array<mat4x4<f32>>;
@group(0) @binding(1) var<storage, read> projection : mat4x4<f32>;
@group(0) @binding(2) var<storage, read_write> mvp : array<mat4x4<f32>>;
@group(0) @binding(3) var<uniform> count : u32;

@compute @workgroup_size(128)
fn main(@builtin(global_invocation_id) global_id : vec3<u32>) {
    // Guard against out-of-bounds work group sizes
    let index = global_id.x;
    if (index >= count) {
        return;
    }

    mvp[index] = projection * modelView[index];
}`;async function x(){if(!navigator.gpu)throw new Error("Not Support WebGPU");const e=await navigator.gpu.requestAdapter({powerPreference:"high-performance"});if(!e)throw new Error("No Adapter Found");return await e.requestDevice({requiredLimits:{maxStorageBufferBindingSize:e.limits.maxStorageBufferBindingSize}})}async function T(e,n,s){const c={layout:"auto",compute:{module:e.createShaderModule({code:S}),entryPoint:"main"}},i=await e.createComputePipelineAsync(c),o=e.createBuffer({size:n.byteLength,usage:GPUBufferUsage.STORAGE|GPUBufferUsage.COPY_DST});console.time("writeBuffer"),e.queue.writeBuffer(o,0,n),console.timeEnd("writeBuffer");const p=e.createBuffer({size:s.byteLength,usage:GPUBufferUsage.STORAGE|GPUBufferUsage.COPY_DST});e.queue.writeBuffer(p,0,s);const l=e.createBuffer({size:n.byteLength,usage:GPUBufferUsage.STORAGE|GPUBufferUsage.COPY_SRC}),g=e.createBuffer({size:4,usage:GPUBufferUsage.UNIFORM|GPUBufferUsage.COPY_DST});e.queue.writeBuffer(g,0,new Uint32Array([a]));const u=e.createBindGroup({layout:i.getBindGroupLayout(0),entries:[{binding:0,resource:{buffer:o}},{binding:1,resource:{buffer:p}},{binding:2,resource:{buffer:l}},{binding:3,resource:{buffer:g}}]});return{pipeline:i,bindGroup:u,mvpBuffer:l}}async function y(){B.innerHTML=b.innerHTML="-",f.innerHTML="Testing ...",f.disabled=!0,await new Promise(r=>setTimeout(r));const e=U(),n=new Float32Array(a*4*4),s=[],c=e;for(let r=0;r<a;r++)s.push(e),n.set(e,r*4*4);console.time("cpu multiply x10");let i=performance.now();for(let r=0;r<10;r++)for(let t=0;t<a;t++){let m=s[t];G(m,c,m)}B.innerHTML=((performance.now()-i)/10).toFixed(2),console.timeEnd("cpu multiply x10");const o=await x(),{pipeline:p,bindGroup:l,mvpBuffer:g}=await T(o,n,c),u=o.createBuffer({size:n.byteLength,usage:GPUBufferUsage.MAP_READ|GPUBufferUsage.COPY_DST}),d=o.createCommandEncoder();for(let r=0;r<300;r++){const t=d.beginComputePass();t.setPipeline(p),t.setBindGroup(0,l),t.dispatchWorkgroups(Math.ceil(a/128)),t.end()}d.copyBufferToBuffer(g,0,u,0,n.byteLength),o.queue.submit([d.finish()]),console.time("gpu multiply x300"),i=performance.now(),await u.mapAsync(GPUMapMode.READ),b.innerHTML=((performance.now()-i)/300).toFixed(2),console.timeEnd("gpu multiply x300");const w=u.getMappedRange(),P=new Float32Array(w);console.log(P),u.unmap(),f.disabled=!1,f.innerHTML="Run"}let a=1e6,h=document.querySelector("#select"),f=document.querySelector("button"),B=document.querySelector("#cpu"),b=document.querySelector("#gpu");h.addEventListener("change",e=>{console.log(e.target.value),a=+e.target.value,y()});f.addEventListener("click",y);
