import"./modulepreload-polyfill-3cfb730f.js";import{b as B}from"./basic.vert-ae845a6f.js";import{v as w,a as G}from"./cube-91a5abf9.js";import{b as y}from"./math-7b9ebb83.js";import"./mat4-5036aab8.js";const E=`@group(1) @binding(0) var Sampler: sampler;
@group(1) @binding(1) var Texture: texture_2d<f32>;
@group(1) @binding(2) var<uniform> uvOffset : vec4<f32>;

@fragment
fn main(@location(0) fragUV: vec2<f32>,
        @location(1) fragPosition: vec4<f32>) -> @location(0) vec4<f32> {
  // only show specific uv area of the big texture
  var uv = fragUV * vec2<f32>(uvOffset[2], uvOffset[3]) + vec2<f32>(uvOffset[0], uvOffset[1]);
  return textureSample(Texture, Sampler, uv) * fragPosition;
}
`,S="/orillusion-webgpu-samples/sprites.webp";async function R(e){if(!navigator.gpu)throw new Error("Not Support WebGPU");const t=await navigator.gpu.requestAdapter();if(!t)throw new Error("No Adapter Found");const i=await t.requestDevice(),n=e.getContext("webgpu"),r=navigator.gpu.getPreferredCanvasFormat(),o=window.devicePixelRatio||1;e.width=e.clientWidth*o,e.height=e.clientHeight*o;const a={width:e.width,height:e.height};return n.configure({device:i,format:r,alphaMode:"opaque"}),{device:i,context:n,format:r,size:a}}async function C(e,t,i){const n=await e.createRenderPipelineAsync({label:"Basic Pipline",layout:"auto",vertex:{module:e.createShaderModule({code:B}),entryPoint:"main",buffers:[{arrayStride:20,attributes:[{shaderLocation:0,offset:0,format:"float32x3"},{shaderLocation:1,offset:12,format:"float32x2"}]}]},fragment:{module:e.createShaderModule({code:E}),entryPoint:"main",targets:[{format:t}]},primitive:{topology:"triangle-list",cullMode:"back",frontFace:"ccw"},depthStencil:{depthWriteEnabled:!0,depthCompare:"less",format:"depth24plus"}}),r=e.createTexture({size:i,format:"depth24plus",usage:GPUTextureUsage.RENDER_ATTACHMENT}),o=r.createView(),a=e.createBuffer({label:"GPUBuffer store vertex",size:w.byteLength,usage:GPUBufferUsage.VERTEX|GPUBufferUsage.COPY_DST});e.queue.writeBuffer(a,0,w);const f=e.createBuffer({label:"GPUBuffer store 4x4 matrix",size:4*4*4,usage:GPUBufferUsage.UNIFORM|GPUBufferUsage.COPY_DST}),s=e.createBindGroup({label:"Uniform Group with Matrix",layout:n.getBindGroupLayout(0),entries:[{binding:0,resource:{buffer:f}}]});return{pipeline:n,vertexBuffer:a,mvpBuffer:f,uniformGroup:s,depthTexture:r,depthView:o}}function M(e,t,i,n){const r=e.createCommandEncoder(),o={colorAttachments:[{view:t.getCurrentTexture().createView(),clearValue:{r:0,g:0,b:0,a:1},loadOp:"clear",storeOp:"store"}],depthStencilAttachment:{view:i.depthView,depthClearValue:1,depthLoadOp:"clear",depthStoreOp:"store"}},a=r.beginRenderPass(o);a.setPipeline(i.pipeline),a.setBindGroup(0,i.uniformGroup),a.setBindGroup(1,n),a.setVertexBuffer(0,i.vertexBuffer),a.draw(G),a.end(),e.queue.submit([r.finish()])}async function V(){const e=document.querySelector("canvas");if(!e)throw new Error("No Canvas");const{device:t,context:i,format:n,size:r}=await R(e),o=await C(t,n,r),f=await(await fetch(S)).blob(),s=await createImageBitmap(f),d=[s.width,s.height],g=t.createTexture({size:d,format:"rgba8unorm",usage:GPUTextureUsage.TEXTURE_BINDING|GPUTextureUsage.COPY_DST|GPUTextureUsage.RENDER_ATTACHMENT});t.queue.copyExternalImageToTexture({source:s},{texture:g},d);const T=t.createSampler({magFilter:"linear",minFilter:"linear"}),u=new Float32Array([0,0,1/3,1/2]),c=t.createBuffer({label:"GPUBuffer store UV offset",size:4*4,usage:GPUBufferUsage.UNIFORM|GPUBufferUsage.COPY_DST});t.queue.writeBuffer(c,0,u);const b=t.createBindGroup({label:"Texture Group with Texture/Sampler",layout:o.pipeline.getBindGroupLayout(1),entries:[{binding:0,resource:T},{binding:1,resource:g.createView()},{binding:2,resource:{buffer:c}}]});let h=r.width/r.height;const v={x:0,y:0,z:-5},P={x:1,y:1,z:1},p={x:0,y:0,z:0};let l=0;function m(){l++,l%30===0&&(u[0]=u[0]>=2/3?0:u[0]+1/3,l%90===0&&(u[1]=u[1]>=1/2?0:u[1]+1/2),t.queue.writeBuffer(c,0,u));const x=Date.now()/1e3;p.x=Math.sin(x),p.y=Math.cos(x);const U=y(h,v,p,P);t.queue.writeBuffer(o.mvpBuffer,0,U.buffer),M(t,i,o,b),requestAnimationFrame(m)}m(),window.addEventListener("resize",()=>{r.width=e.width=e.clientWidth*devicePixelRatio,r.height=e.height=e.clientHeight*devicePixelRatio,o.depthTexture.destroy(),o.depthTexture=t.createTexture({size:r,format:"depth24plus",usage:GPUTextureUsage.RENDER_ATTACHMENT}),o.depthView=o.depthTexture.createView(),h=r.width/r.height})}V();
